---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
   AvailabilityZone:
      Description: 'Availability zone in which to create EC2 resources.'
      Type: String
      AllowedPattern: '[a-zA-Z]'
   VpcIpv4AddressBlock:
      Description: 'IPv4 address block to assign to the VPC in CIDR format.'
      Type: String
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
   EnableIpv6:
      Description: 'Whether to assign an IPv6 address block to the VPC and the subnets.'
      Type: String
      AllowedValues:
         - 'yes'
         - 'no'
      Default: 'yes'
   NatInstanceImageId:
      Description: 'AMI ID to base the NAT instance on.'
      Type: String
      AllowedPattern: '^ami-[a-z0-9]+$'
   BridgeInstanceImageId:
      Description: 'AMI ID to base the bridge instance on.'
      Type: String
      AllowedPattern: '^ami-[a-z0-9]+$'
Conditions:
   EnableIpv6: !Equals [ !Ref EnableIpv6 , 'yes' ]
Resources:
   Vpc:
      Type: 'AWS::EC2::VPC'
      Properties:
         CidrBlock: !Ref VpcIpv4AddressBlock
   VpcIpv6AddressBlock:
      Type: 'AWS::EC2::VPCCidrBlock'
      Condition: EnableIpv6
      Properties:
         AmazonProvidedIpv6CidrBlock: true
         VpcId: !Ref Vpc
   InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
   InternetGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
         InternetGatewayId: !Ref InternetGateway
         VpcId: !Ref Vpc
   PublicSubnet:
      Type: 'AWS::EC2::Subnet'
      Properties:
         AvailabilityZone: !Sub '${AWS::Region}${AvailabilityZone}'
         CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 2, 4 ] ]
         VpcId: !Ref Vpc
   PublicRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
         VpcId: !Ref Vpc
   InternetRoute:
      Type: 'AWS::EC2::Route'
      Properties:
         RouteTableId: !Ref PublicRouteTable
         GatewayId: !Ref InternetGateway
         DestinationCidrBlock: '0.0.0.0/0'
      DependsOn: InternetGatewayAttachment
   PublicRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
         RouteTableId: !Ref PublicRouteTable
         SubnetId: !Ref PublicSubnet
   BridgeInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For the bridge instance itself.'
         SecurityGroupIngress:
            -
               CidrIp: 0.0.0.0/0
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   BridgeSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For the bridge instance to access other instances.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt BridgeInstanceSecurityGroup.GroupId
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   BridgeInstanceSecurityGroupEgress:
      Type: 'AWS::EC2::SecurityGroupEgress'
      Properties:
         GroupId: !GetAtt BridgeInstanceSecurityGroup.GroupId
         DestinationSecurityGroupId: !GetAtt BridgeSecurityGroup.GroupId
         FromPort: 22
         ToPort: 22
         IpProtocol: tcp
   NatSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For instances on private subnets to access the NAT instance.'
         VpcId: !Ref Vpc
   NatInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For the NAT instance itself.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt NatSecurityGroup.GroupId
               FromPort: '-1'
               ToPort: '-1'
               IpProtocol: '-1'
         VpcId: !Ref Vpc
   NatInstance:
      Type: 'AWS::EC2::Instance'
      Properties:
         ImageId: !Ref NatInstanceImageId
         InstanceType: t2.micro
         KeyName: nat
         NetworkInterfaces:
            -
               DeviceIndex: 0
               GroupSet:
                  - !GetAtt BridgeSecurityGroup.GroupId
                  - !GetAtt NatInstanceSecurityGroup.GroupId
               SubnetId: !Ref PublicSubnet
               AssociatePublicIpAddress: true
         SourceDestCheck: false
      DependsOn: InternetGatewayAttachment
   #BridgeInstance:
   #   Type: 'AWS::EC2::Instance'
   #   Properties:
   #      ImageId: !Ref BridgeInstanceImageId
   #      InstanceType: t2.micro
   #      KeyName: frontdoor
   #      NetworkInterfaces:
   #         -
   #            DeviceIndex: 0
   #            GroupSet:
   #               - !GetAtt BridgeInstanceSecurityGroup.GroupId
   #            SubnetId: !Ref PublicSubnet
   #            AssociatePublicIpAddress: true
   PrivateSubnet:
      Type: 'AWS::EC2::Subnet'
      Properties:
         AvailabilityZone: !Sub '${AWS::Region}${AvailabilityZone}'
         CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 2, 4 ] ]
         VpcId: !Ref Vpc
   PrivateRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
         VpcId: !Ref Vpc
   NatRoute:
      Type: 'AWS::EC2::Route'
      Properties:
         RouteTableId: !Ref PrivateRouteTable
         InstanceId: !Ref NatInstance
         DestinationCidrBlock: 0.0.0.0/0
   PrivateRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
         RouteTableId: !Ref PrivateRouteTable
         SubnetId: !Ref PrivateSubnet
   VolumeBuildContainerSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music volume build container.'
         VpcId: !Ref Vpc
   VolumeBuildInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music volume build instance.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt VolumeBuildContainerSecurityGroup.GroupId
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   VolumeParameter:
      Type: 'AWS::SSM::Parameter'
      Properties:
         Name: !Sub '/music/volume'
         Type: String
         AllowedPattern: 'vol-[a-z0-9]+'
         Value: 'vol-invalid'
   VolumeBuildRole:
      Type: 'AWS::IAM::Role'
      Properties:
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Principal:
                     Service: 'codebuild.amazonaws.com'
                  Action: 'sts:AssumeRole'
                  Effect: Allow
         Policies:
            -
               PolicyName: environment
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ecr:GetDownloadUrlForLayer'
                           - 'ecr:BatchGetImage'
                           - 'ecr:BatchCheckLayerAvailability'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: packer
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:DescribeImages'
                        Resource: '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:RunInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              aws:RequestTag/Packer: 'music-volume'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:RunInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet}'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}::image/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/music-packer'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateTags'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              ec2:CreateAction: 'RunInstances'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:DescribeInstances'
                        Resource:
                           - '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:StopInstances'
                           - 'ec2:TerminateInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              ec2:ResourceTag/Packer: 'music-volume'
                        Effect: Allow
            -
               PolicyName: parameter
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ssm:PutParameter'
                        Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${VolumeParameter}'
                        Effect: Allow
   VolumeBuildLogsPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
         PolicyName: logs
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Action:
                     - 'logs:CreateLogGroup'
                     - 'logs:CreateLogStream'
                     - 'logs:PutLogEvents'
                  Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${VolumeBuildProject}:*'
                  Effect: Allow
         Roles:
            - !Ref VolumeBuildRole
   VolumeBuildProject:
      Type: 'AWS::CodeBuild::Project'
      Properties:
         Name: music-volume
         Description: 'Prepare and populate music EBS volume.'
         ServiceRole: !GetAtt VolumeBuildRole.Arn
         Source:
            Type: GITHUB
            Location: 'https://github.com/kalrish/aws-music.git'
            GitCloneDepth: 1
            BuildSpec: 'ec2/buildspec-volume.yaml'
         Environment:
            Type: LINUX_CONTAINER
            ComputeType: BUILD_GENERAL1_SMALL
            Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ami-build-env'
            PrivilegedMode: false
            EnvironmentVariables:
               -
                  Name: INSTANCE_VPC
                  Type: PLAINTEXT
                  Value: !Ref Vpc
               -
                  Name: INSTANCE_SUBNET
                  Type: PLAINTEXT
                  Value: !Ref PrivateSubnet
               -
                  Name: INSTANCE_SECURITY_GROUPS
                  Type: PLAINTEXT
                  Value: !Sub '${NatSecurityGroup.GroupId},${VolumeBuildInstanceSecurityGroup.GroupId}'
               -
                  Name: SOURCE_BUCKET
                  Type: PLAINTEXT
                  Value: !ImportValue music-SourceBucket
               -
                  Name: AVAILABILITY_ZONE
                  Type: PLAINTEXT
                  Value: !Ref AvailabilityZone
         VpcConfig:
            VpcId: !Ref Vpc
            Subnets:
               - !Ref PrivateSubnet
            SecurityGroupIds:
               - !GetAtt NatSecurityGroup.GroupId
               - !GetAtt VolumeBuildContainerSecurityGroup.GroupId
         Artifacts:
            Type: NO_ARTIFACTS
   WorkerAmiBuildContainerSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music AMI build container.'
         VpcId: !Ref Vpc
   WorkerAmiBuildInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music AMI build instance.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt WorkerAmiBuildContainerSecurityGroup.GroupId
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   WorkerAmiBuildRole:
      Type: 'AWS::IAM::Role'
      Properties:
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Principal:
                     Service: 'codebuild.amazonaws.com'
                  Action: 'sts:AssumeRole'
                  Effect: Allow
         Policies:
            -
               PolicyName: environment
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ecr:GetDownloadUrlForLayer'
                           - 'ecr:BatchGetImage'
                           - 'ecr:BatchCheckLayerAvailability'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: packer
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:DescribeImages'
                        Resource: '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:RunInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              aws:RequestTag/Packer: 'music-worker'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:RunInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet}'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}::image/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/music-packer'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateTags'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              ec2:CreateAction: 'RunInstances'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:DescribeInstances'
                        Resource:
                           - '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:StopInstances'
                           - 'ec2:TerminateInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              ec2:ResourceTag/Packer: 'music-worker'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateImage'
                           - 'ec2:RegisterImage'
                           - 'ec2:ModifyImageAttribute'
                        Resource:
                           - '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:DescribeVolumes'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: launch-template
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:DescribeLaunchTemplates'
                        Resource: '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateLaunchTemplateVersion'
                        Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:launch-template/${WorkerLaunchTemplate}'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:ModifyLaunchTemplate'
                        Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:launch-template/${WorkerLaunchTemplate}'
                        Effect: Allow
   WorkerAmiBuildLogsPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
         PolicyName: logs
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Action:
                     - 'logs:CreateLogGroup'
                     - 'logs:CreateLogStream'
                     - 'logs:PutLogEvents'
                  Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${WorkerAmiBuildProject}:*'
                  Effect: Allow
         Roles:
            - !Ref WorkerAmiBuildRole
   WorkerAmiBuildProject:
      Type: 'AWS::CodeBuild::Project'
      Properties:
         Name: music-worker-ami
         Description: 'Build AMI to host music compilation instance.'
         ServiceRole: !GetAtt WorkerAmiBuildRole.Arn
         Source:
            Type: GITHUB
            Location: 'https://github.com/kalrish/aws-music.git'
            GitCloneDepth: 1
            BuildSpec: 'ec2/buildspec-worker.yaml'
         Environment:
            Type: LINUX_CONTAINER
            ComputeType: BUILD_GENERAL1_SMALL
            Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ami-build-env'
            PrivilegedMode: false
            EnvironmentVariables:
               -
                  Name: INSTANCE_VPC
                  Type: PLAINTEXT
                  Value: !Ref Vpc
               -
                  Name: INSTANCE_SUBNET
                  Type: PLAINTEXT
                  Value: !Ref PrivateSubnet
               -
                  Name: INSTANCE_SECURITY_GROUPS
                  Type: PLAINTEXT
                  Value: !Sub '${NatSecurityGroup.GroupId},${WorkerAmiBuildInstanceSecurityGroup.GroupId}'
               -
                  Name: LAUNCH_TEMPLATE_NAME
                  Type: PLAINTEXT
                  Value: music-worker
         VpcConfig:
            VpcId: !Ref Vpc
            Subnets:
               - !Ref PrivateSubnet
            SecurityGroupIds:
               - !GetAtt NatSecurityGroup.GroupId
               - !GetAtt WorkerAmiBuildContainerSecurityGroup.GroupId
         Artifacts:
            Type: NO_ARTIFACTS
   ServerAmiBuildContainerSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music AMI build container.'
         VpcId: !Ref Vpc
   ServerAmiBuildInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music AMI build instance.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt ServerAmiBuildContainerSecurityGroup.GroupId
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   ServerAmiBuildRole:
      Type: 'AWS::IAM::Role'
      Properties:
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Principal:
                     Service: 'codebuild.amazonaws.com'
                  Action: 'sts:AssumeRole'
                  Effect: Allow
         Policies:
            -
               PolicyName: environment
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ecr:GetDownloadUrlForLayer'
                           - 'ecr:BatchGetImage'
                           - 'ecr:BatchCheckLayerAvailability'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: packer
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:DescribeImages'
                        Resource: '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:RunInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              aws:RequestTag/Packer: 'music-server'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:RunInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet}'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}::image/*'
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/music-packer'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateTags'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              ec2:CreateAction: 'RunInstances'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:DescribeInstances'
                        Resource:
                           - '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:StopInstances'
                           - 'ec2:TerminateInstances'
                        Resource:
                           - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                        Condition:
                           StringEquals:
                              ec2:ResourceTag/Packer: 'music-server'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateImage'
                           - 'ec2:RegisterImage'
                           - 'ec2:ModifyImageAttribute'
                        Resource:
                           - '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:DescribeVolumes'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: launch-template
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:DescribeLaunchTemplates'
                        Resource: '*'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:CreateLaunchTemplateVersion'
                        Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:launch-template/${ServerLaunchTemplate}'
                        Effect: Allow
                     -
                        Action:
                           - 'ec2:ModifyLaunchTemplate'
                        Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:launch-template/${ServerLaunchTemplate}'
                        Effect: Allow
   ServerAmiBuildLogsPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
         PolicyName: logs
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Action:
                     - 'logs:CreateLogGroup'
                     - 'logs:CreateLogStream'
                     - 'logs:PutLogEvents'
                  Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ServerAmiBuildProject}:*'
                  Effect: Allow
         Roles:
            - !Ref ServerAmiBuildRole
   ServerAmiBuildProject:
      Type: 'AWS::CodeBuild::Project'
      Properties:
         Name: music-server-ami
         Description: 'Build AMI to host music server instance.'
         ServiceRole: !GetAtt ServerAmiBuildRole.Arn
         Source:
            Type: GITHUB
            Location: 'https://github.com/kalrish/aws-music.git'
            GitCloneDepth: 1
            BuildSpec: 'ec2/buildspec-server.yaml'
         Environment:
            Type: LINUX_CONTAINER
            ComputeType: BUILD_GENERAL1_SMALL
            Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ami-build-env'
            PrivilegedMode: false
            EnvironmentVariables:
               -
                  Name: INSTANCE_VPC
                  Type: PLAINTEXT
                  Value: !Ref Vpc
               -
                  Name: INSTANCE_SUBNET
                  Type: PLAINTEXT
                  Value: !Ref PrivateSubnet
               -
                  Name: INSTANCE_SECURITY_GROUPS
                  Type: PLAINTEXT
                  Value: !Sub '${NatSecurityGroup.GroupId},${ServerAmiBuildInstanceSecurityGroup.GroupId}'
               -
                  Name: LAUNCH_TEMPLATE_NAME
                  Type: PLAINTEXT
                  Value: music-server
         VpcConfig:
            VpcId: !Ref Vpc
            Subnets:
               - !Ref PrivateSubnet
            SecurityGroupIds:
               - !GetAtt NatSecurityGroup.GroupId
               - !GetAtt ServerAmiBuildContainerSecurityGroup.GroupId
         Artifacts:
            Type: NO_ARTIFACTS
   Ec2CodeBuildPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
         PolicyName: ec2-codebuild
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Action:
                     - 'ec2:CreateNetworkInterface'
                     - 'ec2:DeleteNetworkInterface'
                     - 'ec2:DescribeDhcpOptions'
                     - 'ec2:DescribeNetworkInterfaces'
                     - 'ec2:DescribeSecurityGroups'
                     - 'ec2:DescribeSubnets'
                     - 'ec2:DescribeVpcs'
                  Resource: '*'
                  Effect: Allow
               -
                  Action:
                     - 'ec2:CreateNetworkInterfacePermission'
                  Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                  Condition:
                     StringEquals:
                        ec2:Subnet: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnet}'
                        ec2:AuthorizedService: 'codebuild.amazonaws.com'
                  Effect: Allow
         Roles:
            - !Ref VolumeBuildRole
            - !Ref WorkerAmiBuildRole
            - !Ref ServerAmiBuildRole
   WorkerInstanceRole:
      Type: 'AWS::IAM::Role'
      Properties:
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Principal:
                     Service: 'ec2.amazonaws.com'
                  Action: 'sts:AssumeRole'
                  Effect: Allow
         Policies:
            -
               PolicyName: sources
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 's3:ListBucket'
                        Resource: !ImportValue music-SourceBucketArn
                        Effect: Allow
                     -
                        Action:
                           - 's3:GetObject'
                        Resource: !Join [ '/', [ !ImportValue music-SourceBucketArn, '*' ] ]
                        Effect: Allow
   WorkerInstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
         Roles:
            - !Ref WorkerInstanceRole
   WorkerLaunchTemplate:
      Type: 'AWS::EC2::LaunchTemplate'
      Properties:
         LaunchTemplateName: music-worker
         LaunchTemplateData:
            IamInstanceProfile:
               Arn: !GetAtt WorkerInstanceProfile.Arn
               Name: !Ref WorkerInstanceProfile
            KeyName: music-worker
            NetworkInterfaces:
               -
                  DeviceIndex: 0
                  Groups:
                     - !GetAtt BridgeSecurityGroup.GroupId
                  SubnetId: !Ref PrivateSubnet
                  AssociatePublicIpAddress: false
   ServerInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music server instances.'
         SecurityGroupIngress:
            -
               CidrIp: 0.0.0.0/0
               FromPort: 873
               ToPort: 873
               IpProtocol: tcp
         VpcId: !Ref Vpc
   ServerLaunchTemplate:
      Type: 'AWS::EC2::LaunchTemplate'
      Properties:
         LaunchTemplateName: music-server
         LaunchTemplateData:
            KeyName: music-server
            NetworkInterfaces:
               -
                  DeviceIndex: 0
                  Groups:
                     - !GetAtt BridgeSecurityGroup.GroupId
                     - !GetAtt ServerInstanceSecurityGroup.GroupId
                  SubnetId: !Ref PublicSubnet
                  AssociatePublicIpAddress: true
