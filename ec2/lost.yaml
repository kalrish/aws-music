---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
   AvailabilityZone:
      Description: 'Availability zone in which to create EC2 resources.'
      Type: String
      AllowedPattern: '[a-zA-Z]'
   VpcIpv4AddressBlock:
      Description: 'IPv4 address block to assign to the VPC in CIDR format.'
      Type: String
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
   EnableIpv6:
      Description: 'Whether to assign an IPv6 address block to the VPC and the subnets.'
      Type: String
      AllowedValues:
         - 'yes'
         - 'no'
      Default: 'yes'
   NatInstanceImageId:
      Description: 'AMI ID to base the NAT instance on.'
      Type: String
      AllowedPattern: '^ami-[a-z0-9]+$'
   BridgeInstanceImageId:
      Description: 'AMI ID to base the bridge instance on.'
      Type: String
      AllowedPattern: '^ami-[a-z0-9]+$'
   EbsVolumeSize:
      Description: 'Size of the EBS volume used to compile the collection.'
      Type: String
      AllowedPattern: '\d+'
Conditions:
   EnableIpv6: !Equals [ !Ref EnableIpv6 , 'yes' ]
Resources:
   Vpc:
      Type: 'AWS::EC2::VPC'
      Properties:
         CidrBlock: !Ref VpcIpv4AddressBlock
   VpcIpv6AddressBlock:
      Type: 'AWS::EC2::VPCCidrBlock'
      Condition: EnableIpv6
      Properties:
         AmazonProvidedIpv6CidrBlock: true
         VpcId: !Ref Vpc
   InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
   InternetGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
         InternetGatewayId: !Ref InternetGateway
         VpcId: !Ref Vpc
   PublicSubnet:
      Type: 'AWS::EC2::Subnet'
      Properties:
         AvailabilityZone: !Sub '${AWS::Region}${AvailabilityZone}'
         CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 2, 4 ] ]
         VpcId: !Ref Vpc
   PublicRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
         VpcId: !Ref Vpc
   InternetRoute:
      Type: 'AWS::EC2::Route'
      Properties:
         RouteTableId: !Ref PublicRouteTable
         GatewayId: !Ref InternetGateway
         DestinationCidrBlock: '0.0.0.0/0'
      DependsOn: InternetGatewayAttachment
   PublicRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
         RouteTableId: !Ref PublicRouteTable
         SubnetId: !Ref PublicSubnet
   BridgeInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For the bridge instance itself.'
         SecurityGroupIngress:
            -
               CidrIp: 0.0.0.0/0
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         #SecurityGroupEgress:
         #   -
         #      DestinationSecurityGroupId: !GetAtt BridgeSecurityGroup.GroupId
         #      FromPort: 22
         #      ToPort: 22
         #      IpProtocol: tcp
         VpcId: !Ref Vpc
   BridgeSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For the bridge instance to access other instances.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt BridgeInstanceSecurityGroup.GroupId
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   NatSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For instances on private subnets to access the NAT instance.'
         VpcId: !Ref Vpc
   NatInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For the NAT instance itself.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt NatSecurityGroup.GroupId
               FromPort: '-1'
               ToPort: '-1'
               IpProtocol: '-1'
         VpcId: !Ref Vpc
   NatInstance:
      Type: 'AWS::EC2::Instance'
      Properties:
         ImageId: !Ref NatInstanceImageId
         InstanceType: t2.micro
         KeyName: nat
         NetworkInterfaces:
            -
               DeviceIndex: 0
               GroupSet:
                  - !GetAtt BridgeSecurityGroup.GroupId
                  - !GetAtt NatInstanceSecurityGroup.GroupId
               SubnetId: !Ref PublicSubnet
               AssociatePublicIpAddress: true
         SourceDestCheck: false
      DependsOn: InternetGatewayAttachment
   #BridgeInstance:
   #   Type: 'AWS::EC2::Instance'
   #   Properties:
   #      ImageId: !Ref BridgeInstanceImageId
   #      InstanceType: t2.micro
   #      KeyName: frontdoor
   #      NetworkInterfaces:
   #         -
   #            DeviceIndex: 0
   #            GroupSet:
   #               - !GetAtt BridgeInstanceSecurityGroup.GroupId
   #            SubnetId: !Ref PublicSubnet
   #            AssociatePublicIpAddress: true
   PrivateSubnet:
      Type: 'AWS::EC2::Subnet'
      Properties:
         AvailabilityZone: !Sub '${AWS::Region}${AvailabilityZone}'
         CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 2, 4 ] ]
         VpcId: !Ref Vpc
   AmiBuildContainerSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music AMI build container.'
         VpcId: !Ref Vpc
   AmiBuildInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music AMI build instance.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt AmiBuildContainerSecurityGroup.GroupId
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   VolumeBuildRole:
      Type: 'AWS::IAM::Role'
      Properties:
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Principal:
                     Service: 'codebuild.amazonaws.com'
                  Action: 'sts:AssumeRole'
                  Effect: Allow
         Policies:
            -
               PolicyName: ecr-pull
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ecr:GetDownloadUrlForLayer'
                           - 'ecr:BatchGetImage'
                           - 'ecr:BatchCheckLayerAvailability'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: ec2-codebuild
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:DescribeSubnets'
                           - 'ec2:DescribeSecurityGroups'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: ec2-volume-create
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:*'
                        Resource: '*'
                        Effect: Allow
   VolumeBuildLogsPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
         PolicyName: logs
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Action:
                     - 'logs:CreateLogGroup'
                     - 'logs:CreateLogStream'
                     - 'logs:PutLogEvents'
                  Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AmiBuildProject}:*'
                  Effect: Allow
         Roles:
            - !Ref VolumeBuildRole
   VolumeBuildProject:
      Type: 'AWS::CodeBuild::Project'
      Properties:
         Name: music-volume
         Description: 'Populate EBS volume with music sources.'
         ServiceRole: !GetAtt VolumeBuildRole.Arn
         Source:
            Type: GITHUB
            Location: 'https://github.com/kalrish/aws-music.git'
            GitCloneDepth: 1
            BuildSpec: 'ec2/volume/buildspec.yaml'
         Environment:
            Type: LINUX_CONTAINER
            ComputeType: BUILD_GENERAL1_SMALL
            Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ami-build-env'
            PrivilegedMode: false
            EnvironmentVariables:
               -
                  Name: INSTANCE_SECURITY_GROUP
                  Type: PLAINTEXT
                  Value: !GetAtt AmiBuildInstanceSecurityGroup.GroupId
               -
                  Name: SOURCE_BUCKET
                  Type: PLAINTEXT
                  Value: !ImportValue music-SourceBucket
         VpcConfig:
            VpcId: !Ref Vpc
            Subnets:
               - !Ref PrivateSubnet
            SecurityGroupIds:
               - !GetAtt AmiBuildContainerSecurityGroup.GroupId
         Artifacts:
            Type: NO_ARTIFACTS
   AmiBuildRole:
      Type: 'AWS::IAM::Role'
      Properties:
         AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Principal:
                     Service: 'codebuild.amazonaws.com'
                  Action: 'sts:AssumeRole'
                  Effect: Allow
         Policies:
            -
               PolicyName: ec2-codebuild
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:DescribeSubnets'
                           - 'ec2:DescribeSecurityGroups'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: ecr-pull
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ecr:GetDownloadUrlForLayer'
                           - 'ecr:BatchGetImage'
                           - 'ecr:BatchCheckLayerAvailability'
                        Resource: '*'
                        Effect: Allow
            -
               PolicyName: ec2-ami-create
               PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                     -
                        Action:
                           - 'ec2:*'
                        Resource: '*'
                        Effect: Allow
   AmiBuildLogsPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
         PolicyName: logs
         PolicyDocument:
            Version: '2012-10-17'
            Statement:
               -
                  Action:
                     - 'logs:CreateLogGroup'
                     - 'logs:CreateLogStream'
                     - 'logs:PutLogEvents'
                  Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AmiBuildProject}:*'
                  Effect: Allow
         Roles:
            - !Ref AmiBuildRole
   AmiBuildProject:
      Type: 'AWS::CodeBuild::Project'
      Properties:
         Name: music-ami
         Description: 'Build AMI to host Counter Strike: Global Offensive server.'
         ServiceRole: !GetAtt AmiBuildRole.Arn
         Source:
            Type: GITHUB
            Location: 'https://github.com/kalrish/aws-music.git'
            GitCloneDepth: 1
            BuildSpec: 'ec2/buildspec.yaml'
         Environment:
            Type: LINUX_CONTAINER
            ComputeType: BUILD_GENERAL1_SMALL
            Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ami-build-env'
            PrivilegedMode: false
            EnvironmentVariables:
               -
                  Name: INSTANCE_SECURITY_GROUP
                  Type: PLAINTEXT
                  Value: !GetAtt AmiBuildInstanceSecurityGroup.GroupId
         VpcConfig:
            VpcId: !Ref Vpc
            Subnets:
               - !Ref PrivateSubnet
            SecurityGroupIds:
               - !GetAtt AmiBuildContainerSecurityGroup.GroupId
         Artifacts:
            Type: NO_ARTIFACTS
   RunSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Music run instances.'
         SecurityGroupIngress:
            -
               CidrIp: '0.0.0.0/0'
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   BuildVolume:
      Type: 'AWS::EC2::Volume'
      Properties:
         AvailabilityZone: !Sub '${AWS::Region}${AvailabilityZone}'
         Size: !Ref EbsVolumeSize

