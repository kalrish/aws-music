---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC to host a platform suitable for building and hosting vibes collections.'
Parameters:
   NatInstanceImageId:
      Description: 'ID of the AMI on which to base the NAT instance.'
      Type: 'AWS::EC2::Image::Id'
   NatInstanceKeyName:
      Description: 'Name of the keypair to assign to the NAT instance.'
      Type: 'AWS::EC2::KeyPair::KeyName'
   NatInstanceType:
      Description: 'Type of the NAT instance.'
      Type: String
      Default: t2.medium
   PrivateSubnetAvailabilityZone:
      Description: 'Availability zone in which to create the private subnet. It must support CodeBuild and lambda functions.'
      Type: 'AWS::EC2::AvailabilityZone::Name'
   ProtectedSubnetAvailabilityZone:
      Description: 'Availability zone in which to create the protected subnet.'
      Type: 'AWS::EC2::AvailabilityZone::Name'
   PublicSubnetAvailabilityZone:
      Description: 'Availability zone in which to create the public subnet. EC2 must have capacity to create the NAT instance in it.'
      Type: 'AWS::EC2::AvailabilityZone::Name'
   VpcIpv4AddressBlock:
      Description: 'IPv4 address block to assign to the VPC in CIDR format.'
      Type: String
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
      Default: '10.0.0.0/26'
Metadata:
   AWS::CloudFormation::Interface:
      ParameterGroups:
         -
            Label:
               default: VPC configuration
            Parameters:
               - PrivateSubnetAvailabilityZone
               - ProtectedSubnetAvailabilityZone
               - PublicSubnetAvailabilityZone
               - VpcIpv4AddressBlock
         -
            Label:
               default: NAT instance
            Parameters:
               - NatInstanceImageId
               - NatInstanceKeyName
               - NatInstanceType
      ParameterLabels:
         NatInstanceImageId:
            default: AMI
         NatInstanceKeyName:
            default: Keypair name
         NatInstanceType:
            default: Instance type
         PrivateSubnetAvailabilityZone:
            default: Private subnet availability zone
         ProtectedSubnetAvailabilityZone:
            default: Protected subnet availability zone
         PublicSubnetAvailabilityZone:
            default: Public subnet availability zone
         VpcIpv4AddressBlock:
            default: IPv4 address block
Resources:
   Vpc:
      Type: 'AWS::EC2::VPC'
      Properties:
         CidrBlock: !Ref VpcIpv4AddressBlock
   InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
   InternetGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
         InternetGatewayId: !Ref InternetGateway
         VpcId: !Ref Vpc
   PublicSubnet:
      Type: 'AWS::EC2::Subnet'
      Properties:
         VpcId: !Ref Vpc
         CidrBlock: !Select [ 2 , !Cidr [ !GetAtt Vpc.CidrBlock , 3 , 4 ] ]
         MapPublicIpOnLaunch: true
         AvailabilityZone: !Ref PublicSubnetAvailabilityZone
         Tags:
            -
               Key: Name
               Value: vibes-public
   PublicRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
         VpcId: !Ref Vpc
   InternetRoute:
      DependsOn: InternetGatewayAttachment
      Type: 'AWS::EC2::Route'
      Properties:
         RouteTableId: !Ref PublicRouteTable
         GatewayId: !Ref InternetGateway
         DestinationCidrBlock: '0.0.0.0/0'
   PublicRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
         RouteTableId: !Ref PublicRouteTable
         SubnetId: !Ref PublicSubnet
   BridgeInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For bridge instances.'
         SecurityGroupIngress:
            -
               CidrIp: 0.0.0.0/0
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
   BridgeSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'For instances to be accessed by bridge instances.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt BridgeInstanceSecurityGroup.GroupId
               FromPort: 22
               ToPort: 22
               IpProtocol: tcp
         VpcId: !Ref Vpc
#   BridgeInstanceSecurityGroupEgress:
#      Type: 'AWS::EC2::SecurityGroupEgress'
#      Properties:
#         GroupId: !GetAtt BridgeInstanceSecurityGroup.GroupId
#         DestinationSecurityGroupId: !GetAtt BridgeSecurityGroup.GroupId
#         FromPort: 22
#         ToPort: 22
#         IpProtocol: tcp
   NatSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'Instances in the private subnets, which must be able to access the NAT instance in order to initiate network connections outside of the VPC.'
         VpcId: !Ref Vpc
   NatInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
         GroupDescription: 'NAT instance, to which instances residing in the private subnet must be allowed access.'
         SecurityGroupIngress:
            -
               SourceSecurityGroupId: !GetAtt NatSecurityGroup.GroupId
               FromPort: '-1'
               ToPort: '-1'
               IpProtocol: '-1'
         VpcId: !Ref Vpc
   NatInstance:
      Type: 'AWS::EC2::Instance'
      Properties:
         InstanceType: !Ref NatInstanceType
         ImageId: !Ref NatInstanceImageId
         KeyName: !Ref NatInstanceKeyName
         NetworkInterfaces:
            -
               DeviceIndex: 0
               GroupSet:
                  - !GetAtt BridgeSecurityGroup.GroupId
                  - !GetAtt NatInstanceSecurityGroup.GroupId
               SubnetId: !Ref PublicSubnet
               AssociatePublicIpAddress: true
         SourceDestCheck: false
         Tags:
            -
               Key: Name
               Value: vibes NAT
      DependsOn: InternetGatewayAttachment
   BridgeInstanceLaunchTemplate:
      Type: 'AWS::EC2::LaunchTemplate'
      Properties:
         LaunchTemplateName: vibes-bridge
         LaunchTemplateData:
            NetworkInterfaces:
               -
                  DeviceIndex: 0
                  Groups:
                     - !GetAtt BridgeInstanceSecurityGroup.GroupId
                     - !GetAtt NatSecurityGroup.GroupId
                  SubnetId: !Ref PublicSubnet
                  AssociatePublicIpAddress: true
   PrivateSubnet:
      Type: 'AWS::EC2::Subnet'
      Properties:
         VpcId: !Ref Vpc
         CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 3, 4 ] ]
         AvailabilityZone: !Ref PrivateSubnetAvailabilityZone
         Tags:
            -
               Key: Name
               Value: vibes-private
   PrivateRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
         VpcId: !Ref Vpc
   NatRoute:
      Type: 'AWS::EC2::Route'
      Properties:
         RouteTableId: !Ref PrivateRouteTable
         InstanceId: !Ref NatInstance
         DestinationCidrBlock: 0.0.0.0/0
   PrivateRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
         RouteTableId: !Ref PrivateRouteTable
         SubnetId: !Ref PrivateSubnet
   ProtectedSubnet:
      Type: 'AWS::EC2::Subnet'
      Properties:
         VpcId: !Ref Vpc
         CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 3, 4 ] ]
         AvailabilityZone: !Ref ProtectedSubnetAvailabilityZone
         Tags:
            -
               Key: Name
               Value: vibes-protected
   ProtectedRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
         VpcId: !Ref Vpc
   ProtectedRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
         RouteTableId: !Ref ProtectedRouteTable
         SubnetId: !Ref ProtectedSubnet
   S3Endpoint:
      Type: 'AWS::EC2::VPCEndpoint'
      Properties:
         ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
         RouteTableIds:
            - !Ref PrivateRouteTable
            - !Ref ProtectedRouteTable
            - !Ref PublicRouteTable
         VpcId: !Ref Vpc
